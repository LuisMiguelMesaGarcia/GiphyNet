// <auto-generated />
using System;
using GifAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GifAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GifAPI.Models.Domain.SearchHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CatFact")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GifUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SearchDate");

                    b.ToTable("SearchHistories");
                });

            modelBuilder.Entity("GifAPI.Models.Domain.SearchQueryWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SearchHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("WordOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Word");

                    b.HasIndex("SearchHistoryId", "WordOrder");

                    b.ToTable("SearchQueryWords");
                });

            modelBuilder.Entity("GifAPI.Models.Domain.SearchQueryWord", b =>
                {
                    b.HasOne("GifAPI.Models.Domain.SearchHistory", "SearchHistory")
                        .WithMany("QueryWords")
                        .HasForeignKey("SearchHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchHistory");
                });

            modelBuilder.Entity("GifAPI.Models.Domain.SearchHistory", b =>
                {
                    b.Navigation("QueryWords");
                });
#pragma warning restore 612, 618
        }
    }
}
